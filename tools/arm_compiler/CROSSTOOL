major_version: "1"
minor_version: "0"
# Legacy, deprecated field.
default_target_cpu: "armeabi-v7a"

default_toolchain {
  cpu: "armeabi-v7a"
  toolchain_identifier: "gcc_linux_armhf"
}

toolchain {
  abi_version: "gcc_8.2.1"
  abi_libc_version: "unknown"
  builtin_sysroot: ""
  compiler: "gcc"
  host_system_name: "armeabi-v7a"
  needsPic: false
  supports_gold_linker: false
  supports_incremental_linker: false
  supports_fission: false
  supports_interface_shared_objects: false
  supports_normalizing_ar: true
  supports_start_end_lib: false
  supports_thin_archives: true
  target_cpu: "armeabi-v7a"
  target_libc: "unknown"
  target_system_name: "arm_cortex_a5"
  toolchain_identifier: "gcc_linux_armhf"

  tool_path { name: "ar" path: "gcc_arm_linux_gnueabihf/arm-linux-gnueabihf-ar" }
  tool_path { name: "compat-ld" path: "gcc_arm_linux_gnueabihf/arm-linux-gnueabihf-ld" }
  tool_path { name: "cpp" path: "gcc_arm_linux_gnueabihf/arm-linux-gnueabihf-gcc" }
  tool_path { name: "dwp" path: "gcc_arm_linux_gnueabihf/arm-linux-gnueabihf-dwp" }
  tool_path { name: "gcc" path: "gcc_arm_linux_gnueabihf/arm-linux-gnueabihf-gcc" }
  tool_path { name: "gcov" path: "gcc_arm_linux_gnueabihf/arm-linux-gnueabihf-gcov" }
  # C(++) compiles invoke the compiler (as that is the one knowing where
  # to find libraries), but we provide LD so other rules can invoke the linker.
  tool_path { name: "ld" path: "gcc_arm_linux_gnueabihf/arm-linux-gnueabihf-ld" }
  tool_path { name: "nm" path: "gcc_arm_linux_gnueabihf/arm-linux-gnueabihf-nm" }
  tool_path { name: "objcopy" path: "gcc_arm_linux_gnueabihf/arm-linux-gnueabihf-objcopy" }
  objcopy_embed_flag: "-I"
  objcopy_embed_flag: "binary"
  tool_path { name: "objdump" path: "gcc_arm_linux_gnueabihf/arm-linux-gnueabihf-objdump" }
  tool_path { name: "strip" path: "gcc_arm_linux_gnueabihf/arm-linux-gnueabihf-strip" }

  compiler_flag: "-mcpu=cortex-a5"
  compiler_flag: "-mthumb"
  compiler_flag: "-march=armv7-a"

  # Configure hardware floats.
  compiler_flag: "-mfloat-abi=hard"
  compiler_flag: "-fsingle-precision-constant"

  compiler_flag: "-isystem"
  compiler_flag: "external/arm_gcc_linux_toolchain/lib/gcc/arm-linux-gnueabihf/8.2/include"
  compiler_flag: "-isystem"
  compiler_flag: "external/arm_gcc_linux_toolchain/lib/gcc/arm-linux-gnueabihf/8.2/include-fixed"
  compiler_flag: "-isystem"
  compiler_flag: "external/arm_gcc_linux_toolchain/arm-linux-gnueabihf/include"

  linker_flag: "-mcpu=cortex-a5"
  linker_flag: "-mthumb"
  linker_flag: "-mfloat-abi=hard"

  # Anticipated future default.
  # This makes GCC and Clang do what we want when called through symlinks.
  compiler_flag: "-no-canonical-prefixes"
  linker_flag: "-no-canonical-prefixes"

  # Security hardening on by default.
  # Conservative choice; -D_FORTIFY_SOURCE=2 may be unsafe in some cases.
  # We need to undef it before redefining it as some distributions now have
  # it enabled by default.
  compiler_flag: "-U_FORTIFY_SOURCE"
  compiler_flag: "-fstack-protector"
  linker_flag: "-Wl,-z,relro,-z,now"

  # Enable coloring even if there's no attached terminal. Bazel removes the
  # escape sequences if --nocolor is specified.
  compiler_flag: "-fdiagnostics-color=always"

  # Removal of unused code and data at link time (can this increase binary size in some cases?).
  compiler_flag: "-ffunction-sections"
  compiler_flag: "-fdata-sections"
  linker_flag: "-Wl,--gc-sections"

  compilation_mode_flags {
    mode: DBG
    # Enable debug symbols.
    compiler_flag: "-g"
    compiler_flag: "-gdwarf-2"
    # Don't do any optimizations.
    compiler_flag: "-O0"
  }
  compilation_mode_flags {
    mode: OPT

    # No debug symbols.
    # Maybe we should enable https://gcc.gnu.org/wiki/DebugFission for opt or
    # even generally? However, that can't happen here, as it requires special
    # handling in Bazel.
    compiler_flag: "-g0"

    # Conservative choice for -O
    # -O3 can increase binary size and even slow down the resulting binaries.
    # Profile first and / or use FDO if you need better performance than this.
    compiler_flag: "-O2"

    # Disable assertions
    compiler_flag: "-DNDEBUG"
  }
}
